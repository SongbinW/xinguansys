package cn.junang.sys.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class Chec_planExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table chec_plan
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table chec_plan
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table chec_plan
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table chec_plan
     *
     * @mbg.generated
     */
    public Chec_planExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table chec_plan
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table chec_plan
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table chec_plan
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table chec_plan
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table chec_plan
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table chec_plan
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table chec_plan
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table chec_plan
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table chec_plan
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table chec_plan
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table chec_plan
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andPlLtimeIsNull() {
            addCriterion("pl_ltime is null");
            return (Criteria) this;
        }

        public Criteria andPlLtimeIsNotNull() {
            addCriterion("pl_ltime is not null");
            return (Criteria) this;
        }

        public Criteria andPlLtimeEqualTo(Date value) {
            addCriterionForJDBCDate("pl_ltime =", value, "plLtime");
            return (Criteria) this;
        }

        public Criteria andPlLtimeNotEqualTo(Date value) {
            addCriterionForJDBCDate("pl_ltime <>", value, "plLtime");
            return (Criteria) this;
        }

        public Criteria andPlLtimeGreaterThan(Date value) {
            addCriterionForJDBCDate("pl_ltime >", value, "plLtime");
            return (Criteria) this;
        }

        public Criteria andPlLtimeGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("pl_ltime >=", value, "plLtime");
            return (Criteria) this;
        }

        public Criteria andPlLtimeLessThan(Date value) {
            addCriterionForJDBCDate("pl_ltime <", value, "plLtime");
            return (Criteria) this;
        }

        public Criteria andPlLtimeLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("pl_ltime <=", value, "plLtime");
            return (Criteria) this;
        }

        public Criteria andPlLtimeIn(List<Date> values) {
            addCriterionForJDBCDate("pl_ltime in", values, "plLtime");
            return (Criteria) this;
        }

        public Criteria andPlLtimeNotIn(List<Date> values) {
            addCriterionForJDBCDate("pl_ltime not in", values, "plLtime");
            return (Criteria) this;
        }

        public Criteria andPlLtimeBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("pl_ltime between", value1, value2, "plLtime");
            return (Criteria) this;
        }

        public Criteria andPlLtimeNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("pl_ltime not between", value1, value2, "plLtime");
            return (Criteria) this;
        }

        public Criteria andPlUsernameIsNull() {
            addCriterion("pl_username is null");
            return (Criteria) this;
        }

        public Criteria andPlUsernameIsNotNull() {
            addCriterion("pl_username is not null");
            return (Criteria) this;
        }

        public Criteria andPlUsernameEqualTo(String value) {
            addCriterion("pl_username =", value, "plUsername");
            return (Criteria) this;
        }

        public Criteria andPlUsernameNotEqualTo(String value) {
            addCriterion("pl_username <>", value, "plUsername");
            return (Criteria) this;
        }

        public Criteria andPlUsernameGreaterThan(String value) {
            addCriterion("pl_username >", value, "plUsername");
            return (Criteria) this;
        }

        public Criteria andPlUsernameGreaterThanOrEqualTo(String value) {
            addCriterion("pl_username >=", value, "plUsername");
            return (Criteria) this;
        }

        public Criteria andPlUsernameLessThan(String value) {
            addCriterion("pl_username <", value, "plUsername");
            return (Criteria) this;
        }

        public Criteria andPlUsernameLessThanOrEqualTo(String value) {
            addCriterion("pl_username <=", value, "plUsername");
            return (Criteria) this;
        }

        public Criteria andPlUsernameLike(String value) {
            addCriterion("pl_username like", value, "plUsername");
            return (Criteria) this;
        }

        public Criteria andPlUsernameNotLike(String value) {
            addCriterion("pl_username not like", value, "plUsername");
            return (Criteria) this;
        }

        public Criteria andPlUsernameIn(List<String> values) {
            addCriterion("pl_username in", values, "plUsername");
            return (Criteria) this;
        }

        public Criteria andPlUsernameNotIn(List<String> values) {
            addCriterion("pl_username not in", values, "plUsername");
            return (Criteria) this;
        }

        public Criteria andPlUsernameBetween(String value1, String value2) {
            addCriterion("pl_username between", value1, value2, "plUsername");
            return (Criteria) this;
        }

        public Criteria andPlUsernameNotBetween(String value1, String value2) {
            addCriterion("pl_username not between", value1, value2, "plUsername");
            return (Criteria) this;
        }

        public Criteria andPlMainsIsNull() {
            addCriterion("pl_mains is null");
            return (Criteria) this;
        }

        public Criteria andPlMainsIsNotNull() {
            addCriterion("pl_mains is not null");
            return (Criteria) this;
        }

        public Criteria andPlMainsEqualTo(String value) {
            addCriterion("pl_mains =", value, "plMains");
            return (Criteria) this;
        }

        public Criteria andPlMainsNotEqualTo(String value) {
            addCriterion("pl_mains <>", value, "plMains");
            return (Criteria) this;
        }

        public Criteria andPlMainsGreaterThan(String value) {
            addCriterion("pl_mains >", value, "plMains");
            return (Criteria) this;
        }

        public Criteria andPlMainsGreaterThanOrEqualTo(String value) {
            addCriterion("pl_mains >=", value, "plMains");
            return (Criteria) this;
        }

        public Criteria andPlMainsLessThan(String value) {
            addCriterion("pl_mains <", value, "plMains");
            return (Criteria) this;
        }

        public Criteria andPlMainsLessThanOrEqualTo(String value) {
            addCriterion("pl_mains <=", value, "plMains");
            return (Criteria) this;
        }

        public Criteria andPlMainsLike(String value) {
            addCriterion("pl_mains like", value, "plMains");
            return (Criteria) this;
        }

        public Criteria andPlMainsNotLike(String value) {
            addCriterion("pl_mains not like", value, "plMains");
            return (Criteria) this;
        }

        public Criteria andPlMainsIn(List<String> values) {
            addCriterion("pl_mains in", values, "plMains");
            return (Criteria) this;
        }

        public Criteria andPlMainsNotIn(List<String> values) {
            addCriterion("pl_mains not in", values, "plMains");
            return (Criteria) this;
        }

        public Criteria andPlMainsBetween(String value1, String value2) {
            addCriterion("pl_mains between", value1, value2, "plMains");
            return (Criteria) this;
        }

        public Criteria andPlMainsNotBetween(String value1, String value2) {
            addCriterion("pl_mains not between", value1, value2, "plMains");
            return (Criteria) this;
        }

        public Criteria andPlRemarksIsNull() {
            addCriterion("pl_remarks is null");
            return (Criteria) this;
        }

        public Criteria andPlRemarksIsNotNull() {
            addCriterion("pl_remarks is not null");
            return (Criteria) this;
        }

        public Criteria andPlRemarksEqualTo(String value) {
            addCriterion("pl_remarks =", value, "plRemarks");
            return (Criteria) this;
        }

        public Criteria andPlRemarksNotEqualTo(String value) {
            addCriterion("pl_remarks <>", value, "plRemarks");
            return (Criteria) this;
        }

        public Criteria andPlRemarksGreaterThan(String value) {
            addCriterion("pl_remarks >", value, "plRemarks");
            return (Criteria) this;
        }

        public Criteria andPlRemarksGreaterThanOrEqualTo(String value) {
            addCriterion("pl_remarks >=", value, "plRemarks");
            return (Criteria) this;
        }

        public Criteria andPlRemarksLessThan(String value) {
            addCriterion("pl_remarks <", value, "plRemarks");
            return (Criteria) this;
        }

        public Criteria andPlRemarksLessThanOrEqualTo(String value) {
            addCriterion("pl_remarks <=", value, "plRemarks");
            return (Criteria) this;
        }

        public Criteria andPlRemarksLike(String value) {
            addCriterion("pl_remarks like", value, "plRemarks");
            return (Criteria) this;
        }

        public Criteria andPlRemarksNotLike(String value) {
            addCriterion("pl_remarks not like", value, "plRemarks");
            return (Criteria) this;
        }

        public Criteria andPlRemarksIn(List<String> values) {
            addCriterion("pl_remarks in", values, "plRemarks");
            return (Criteria) this;
        }

        public Criteria andPlRemarksNotIn(List<String> values) {
            addCriterion("pl_remarks not in", values, "plRemarks");
            return (Criteria) this;
        }

        public Criteria andPlRemarksBetween(String value1, String value2) {
            addCriterion("pl_remarks between", value1, value2, "plRemarks");
            return (Criteria) this;
        }

        public Criteria andPlRemarksNotBetween(String value1, String value2) {
            addCriterion("pl_remarks not between", value1, value2, "plRemarks");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table chec_plan
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table chec_plan
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}